#jinja2:lstrip_blocks: True
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apisix:
  node_listen: {{ node_listen }}
  enable_admin: {{ enable_admin }}
  enable_admin_cors: {{ enable_admin_cors }}
  enable_dev_mode: {{ enable_dev_mode }}
  enable_reuseport: {{ enable_reuseport }}
  show_upstream_status_in_response_header: {{ show_upstream_status_in_response_header }}
  enable_ipv6: {{ enable_ipv6 }}
  config_center: {{ config_center }}
  {% if enable_proxy_protocol %}
  proxy_protocol:
    listen_http_port: {{ listen_http_port }}
    listen_https_port: {{ listen_https_port }}
    enable_tcp_pp: {{ enable_tcp_pp }}
    enable_tcp_pp_to_upstream: {{ enable_tcp_pp_to_upstream }}
  {% endif %}
  enable_server_tokens: {{ enable_server_tokens }}
  extra_lua_path: "{{ extra_lua_path }}"
  extra_lua_cpath: "{{ extra_lua_cpath }}"
  {% if lua_module_hook %}
  lua_module_hook: "{{ lua_module_hook }}"
  {% endif %}
  proxy_cache:
    cache_ttl: {{ proxy_cache['cache_ttl'] }}
    zones:
      {% for zone in proxy_cache['zones'] %}
      - name: {{ zone['name'] }}
        memory_size: {{ zone['memory_size']}}
        {% if 'disk_size' in zone %}
        disk_size: {{ zone['disk_size'] }}
        {% endif %}
        {% if 'disk_path' in zone %}
        disk_path: {{ zone['disk_path'] }}
        {% endif %}
        {% if 'cache_levels' in zone %}
        cache_levels: "{{ zone['cache_levels'] }}"
        {% endif %}
      {% endfor %}
  allow_admin:
  {% for ip in allow_admin %}
    - {{ ip }}
  {% endfor %}
  {% if admin_listen %}
  admin_listen:
  {% for addr in admin_listen %}
    ip: {{ addr['ip'] }}
    port: {{ addr['port'] }}

  {% endfor %}
  {% endif %}
  {% if port_admin %}
  port_admin: {{ port_admin }}

  {% endif %}
  {% if https_admin %}
  https_admin: {{ https_admin }}

  {% endif %}
  admin_api_mtls:
    admin_ssl_cert: "{{ admin_api_mtls['admin_ssl_cert'] }}"
    admin_ssl_cert_key: "{{ admin_api_mtls['admin_ssl_cert_key'] }}"
    admin_ssl_ca_cert: "{{ admin_api_mtls['admin_ssl_ca_cert'] }}"

  admin_key:
    {% for key in admin_key%}
    - name: {{ key['name'] }}
      key: {{ key['key'] }}
      role: {{ key['role'] }}
    {% endfor %}

  delete_uri_tail_slash: {{ delete_uri_tail_slash }}
  normalize_uri_like_servlet: {{ normalize_uri_like_servlet }}

  router:
    http: {{ router['http'] }}
    ssl: {{ router['ssl'] }}

  {% if enable_stream_proxy %}
  stream_proxy:
    only: {{ stream_proxy['only'] }}
    tcp:
    {% for addr in stream_proxy['tcp'] %}
      - addr: {{ addr['addr'] }}
        {% if 'tls' in addr %}
        tls: {{ addr['tls'] }}
        {% endif %}
    {% endfor %}
    udp:
    {% for addr in stream_proxy['udp'] %}
      - addr
    {% endfor %}
  {% endif %}
  enable_dns_resolver: {{ enable_dns_resolver }}
  {% if dns_resolver%}
  dns_resolver:
  {% for resolver in dns_resolver %}
    - resolver
  {% endfor %}
  {% endif%}
  {% if dns_resolver_valid %}
  dns_resolver_valid: {{ dns_resolver_valid }}
  {% endif %}
  resolver_timeout: {{ resolver_timeout }}
  enable_resolv_search_opt: {{ enable_resolv_search_opt }}
  ssl:
    enable: {{ ssl['enable'] }}
    listen:
    {% for addr in ssl['listen'] %}
      - port: {{ addr['port'] }}
      {% if 'ip' in addr %}
        ip: {{ addr['ip'] }}
      {% endif %}
      {% if 'enable_http2' in addr %}
        enable_http2: {{ addr['enable_http2'] }}
      {% endif %}
    {% endfor %}
    {% if ssl['ssl_trusted_certificate'] %}
    ssl_trusted_certificate: {{ ssl['ssl_trusted_certificate'] }}
    {% endif %}
    ssl_protocols: {{ ssl['ssl_protocols'] }}
    ssl_ciphers: {{ ssl['ssl_ciphers'] }}
    ssl_session_tickets: {{ ssl['ssl_session_tickets'] }}
    key_encrypt_salt: {{ ssl['key_encrypt_salt'] }}

  enable_control: {{ enable_control }}
  {% if control %}
  control:
    ip: {{ control['ip'] }}
    port: {{ control['port'] }}
  {% endif %}
  disable_sync_configuration_during_start: {{ disable_sync_configuration_during_start }}

nginx_config:
  {% if 'user' in nginx_config %}
  user: {{ nginx_config['user'] }}
  {% endif %}
  error_log: {{ nginx_config['error_log'] }}
  error_log_level: {{ nginx_config['error_log_level'] }}
  worker_processes: {{ nginx_config['worker_processes'] }}
  enable_cpu_affinity: {{ nginx_config['enable_cpu_affinity'] }}
  worker_rlimit_nofile: {{ nginx_config['worker_rlimit_nofile'] }} 
  worker_shutdown_timeout: {{ nginx_config['worker_shutdown_timeout'] }}   
  max_pending_timers: {{ nginx_config['max_pending_timers'] }}
  max_running_timers: {{ nginx_config['max_running_timers'] }}
  event:
    worker_connections: {{ nginx_config['event']['worker_connections'] }}
  {% if 'envs' in nginx_config %}
  envs:
  {% for env in nginx_config['envs'] %}
    - {{ env }}
  {% endfor %}
  {% endif %}
  meta:
    lua_shared_dict:
      prometheus-metrics: {{ nginx_config['meta']['lua_shared_dict']['prometheus-metrics'] }}
  stream:
    enable_access_log: {{ nginx_config['stream']['enable_access_log'] }}
    access_log: {{ nginx_config['stream']['access_log'] }}
    access_log_format: {{ nginx_config['stream']['access_log_format'] }}
    access_log_format_escape: {{ nginx_config['stream']['access_log_format_escape'] }}
    lua_shared_dict:
      etcd-cluster-health-check-stream: {{ nginx_config['stream']['lua_shared_dict']['etcd-cluster-health-check-stream'] }}
      lrucache-lock-stream: {{ nginx_config['stream']['lua_shared_dict']['lrucache-lock-stream'] }}
      etcd-cluster-health-check-stream: {{ nginx_config['stream']['lua_shared_dict']['etcd-cluster-health-check-stream'] }}
      plugin-limit-conn-stream: {{ nginx_config['stream']['lua_shared_dict']['plugin-limit-conn-stream'] }}
  {% if nginx_config['main_configuration_snippet'] %}
  main_configuration_snippet: {{ nginx_config['main_configuration_snippet'] }}
  {% endif %}
  {% if nginx_config['http_configuration_snippet'] %}
  http_configuration_snippet: {{ nginx_config['http_configuration_snippet'] }}
  {% endif %}
  {% if nginx_config['http_server_configuration_snippet'] %}
  http_server_configuration_snippet: {{ nginx_config['http_server_configuration_snippet'] }}
  {% endif %}
  {% if nginx_config['http_server_location_configuration_snippet'] %}
  http_server_location_configuration_snippet: {{ nginx_config['http_server_location_configuration_snippet'] }}
  {% endif %}
  {% if nginx_config['http_admin_configuration_snippet'] %}
  http_admin_configuration_snippet: {{ nginx_config['http_admin_configuration_snippet'] }}
  {% endif %}
  {% if nginx_config['http_end_configuration_snippet'] %}
  http_end_configuration_snippet: {{ nginx_config['http_end_configuration_snippet'] }}
  {% endif %}
  {% if nginx_config['stream_configuration_snippet'] %}
  stream_configuration_snippet: {{ nginx_config['stream_configuration_snippet'] }}
  {% endif %}
  http:
    enable_access_log: {{ nginx_config['http']['enable_access_log'] }}
    access_log: {{ nginx_config['http']['access_log'] }}
    access_log_format: {{ nginx_config['http']['access_log_format'] }}
    access_log_format_escape: {{ nginx_config['http']['access_log_format_escape'] }}
    keepalive_timeout: {{ nginx_config['http']['keepalive_timeout'] }}
    client_header_timeout: {{ nginx_config['http']['client_header_timeout'] }}
    client_body_timeout: {{ nginx_config['http']['client_body_timeout'] }}
    client_max_body_size: {{ nginx_config['http']['client_max_body_size'] }}
    send_timeout: {{ nginx_config['http']['send_timeout'] }}
    underscores_in_headers: {{ nginx_config['http']['underscores_in_headers'] }}
    real_ip_header: {{ nginx_config['http']['real_ip_header'] }}
    real_ip_recursive: {{ nginx_config['http']['real_ip_recursive'] }} 
    real_ip_from:
    {% for ip in nginx_config['http']['real_ip_from'] %}
      - "{{ ip }}"
    {% endfor %}
    proxy_ssl_server_name: {{ nginx_config['http']['proxy_ssl_server_name'] }}
    upstream:
      keepalive: {{ nginx_config['http']['upstream']['keepalive'] }}
      keepalive_requests: {{ nginx_config['http']['upstream']['keepalive_requests'] }}
      keepalive_timeout: {{ nginx_config['http']['upstream']['keepalive_timeout'] }}
    charset: {{ nginx_config['http']['charset'] }}
    variables_hash_max_size: {{ nginx_config['http']['variables_hash_max_size'] }}
    lua_shared_dict:
    {% for key, value in nginx_config['http']['lua_shared_dict'].items() %}
      {{ key }}: {{ value }} 
    {% endfor %}
etcd:
  host:
  {% for host in ansible_play_hosts_all %}
    - http://{{ hostvars[host]['ansible_'+private_nic_name]['ipv4']['address'] }}:2379
  {% endfor %}
  prefix: {{ etcd['prefix'] }}
  timeout: {{ etcd['timeout'] }}
  startup_retry: {{ etcd['startup_retry'] }}
  tls:
    verify: {{ etcd['tls']['verify'] }}
graphql:
  max_size: {{ graphql['max_size'] }}
plugins: # sorted by priority
{% for plugin in plugins%}
  - {{ plugin }}
{% endfor %}
stream_plugins: # sorted by priority
{% for stream_plugin in stream_plugins%}
  - {{ stream_plugin }}
{% endfor %}
plugin_attr:
  {{ plugin_attr }}
