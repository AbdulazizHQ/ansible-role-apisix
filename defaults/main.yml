---
# defaults file for ansible-role-apisix

# APISIX gateway port
node_listen: 9080

# Enable admin API access
enable_admin: 'true'

# Admin API support CORS response headers.
enable_admin_cors: 'true'

# Sets nginx worker_processes to 1 if set to true.
enable_dev_mode: 'false'

# Enable nginx SO_REUSEPORT switch if set to true.
enable_reuseport: 'true'

# When true all upstream status write to `X-APISIX-Upstream-Status` otherwise only 5xx code
show_upstream_status_in_response_header: 'false' 

enable_ipv6: 'true'

# Where to store configuration values, can be either: etcd or yaml
config_center: etcd

### proxy_protocol: Proxy Protocol configuration
enable_proxy_protocol: false

# The port with proxy protocol for http, it differs from node_listen and port_admin.
# This port can only receive http request with proxy protocol, but node_listen & port_admin
# can only receive http request. If you enable proxy protocol, you must use this port to
# receive http request with proxy protocol
proxy_protocol:
  # listen_http_port: 9181
# The port with proxy protocol for https
  # listen_https_port: 9182          
# Enable the proxy protocol for tcp proxy, it works for stream_proxy.tcp option
  # enable_tcp_pp: 'true'
# Enables the proxy protocol to the upstream server
  # enable_tcp_pp_to_upstream: 'true'

# Whether the APISIX version number should be shown in Server header.
# It's enabled by default.
enable_server_tokens: 'true'        

# configurations to load third party code and/or override the builtin one.

# extend lua_package_path to load third party code
extra_lua_path: ""

# extend lua_package_cpath to load third party code
extra_lua_cpath: ""

# the hook module which will be used to inject third party code into APISIX
lua_module_hook: ""
# Proxy Caching configuration
# The default caching time in disk if the upstream does not specify the cache time
# The parameters of a cache
# The name of the cache, administrator can specify
# which cache to use by name in the admin api (disk|memory)
# The size of shared memory, it's used to store the cache index for
# disk strategy, store cache content for memory strategy (disk|memory)
# The size of disk, it's used to store the cache data (disk)
# The path to store the cache data (disk)
# The hierarchy levels of a cache (disk)
proxy_cache:                      
  cache_ttl: 10s
  zones:
    - name: disk_cache_one
      memory_size: 50m
      disk_size: 1G
      disk_path: /tmp/disk_cache_one
      cache_levels: "1:2"
    - name: memory_cache
      memory_size: 50m

# http://nginx.org/en/docs/http/ngx_http_access_module.html#allow
# If we don't set any IP list, then any IP access is allowed by default.
allow_admin:
  - 127.0.0.0/24

admin_listen:
port_admin:
https_admin:

admin_api_mtls:
  admin_ssl_cert: ""
  admin_ssl_cert_key: ""
  admin_ssl_ca_cert: ""

# Default token when use API to call for Admin API.
# *NOTE*: Highly recommended to modify this value to protect APISIX's Admin API.
# Disabling this configuration item means that the Admin API does not
# require any authentication.
# Roles descriptions:
#   admin: manage all configuration data
#   viewer: only can view configuration data
admin_key:
  - name: admin
    key: edd1c9f034335f136f87ad84b625c8f1 
    role: admin                 
  - name: viewer
    key: 4054f7cf07e344346cd3f287985e76a2
    role: viewer

# delete the '/' at the end of the URI
delete_uri_tail_slash: "false"

# The URI normalization in servlet is a little different from the RFC's.
# See https://github.com/jakartaee/servlet/blob/master/spec/src/main/asciidoc/servlet-spec-body.adoc#352-uri-path-canonicalization,
# which is used under Tomcat.
# Turn this option on if you want to be compatible with servlet when matching URI path.
normalize_uri_like_servlet: "false"

router:
  # radixtree_uri: match route by uri(base on radixtree)
  # radixtree_host_uri: match route by host + uri(base on radixtree)
  # radixtree_uri_with_parameter: like radixtree_uri but match uri with parameters,
  # see https://github.com/api7/lua-resty-radixtree/#parameters-in-path for
  # more details.
  http: radixtree_uri

  # radixtree_sni: match route by SNI(base on radixtree)
  ssl: radixtree_sni

enable_stream_proxy: false
#stream_proxy:                  # TCP/UDP proxy
#  only: true                   # use stream proxy only, don't enable HTTP stuff
#  tcp:                         # TCP proxy port list
#    - addr: 9100
#      tls: true
#    - addr: "127.0.0.1:9101"
#  udp:                         # UDP proxy port list
#    - 9200
#    - "127.0.0.1:9201"

enable_dns_resolver: "false"
dns_resolver:
dns_resolver_valid:

resolver_timeout: 5
enable_resolv_search_opt: "true"
ssl:
  enable: "true"
  listen:
    - port: 9443
      enable_http2: "true"

  # Specifies a file path with trusted CA certificates in the PEM format
  # used to verify the certificate when APISIX needs to do SSL/TLS handshaking
  # with external services (e.g. etcd)
  ssl_trusted_certificate: 

  ssl_protocols: TLSv1.2 TLSv1.3
  ssl_ciphers: ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
  ssl_session_tickets: "false"

  #  If not set, will save origin ssl key into etcd.
  #  If set this, must be a string of length 16. And it will encrypt ssl key with AES-128-CBC
  #  !!! So do not change it after saving your ssl, it can't decrypt the ssl keys have be saved if you change !!
  key_encrypt_salt: edd1c9f0985e76a2

enable_control: "true"
control:

disable_sync_configuration_during_start: "false"

# config for render the template to generate nginx.conf
# specifies the execution user of the worker process.
# the "user" directive makes sense only if the master process runs with super-user privileges.
# if you're not root user,the default is current user.
nginx_config:                     
  error_log: logs/error.log
  
  # warn,error
  error_log_level:  warn
  # if you want use multiple cores in container, you can inject the number of cpu as environment variable "APISIX_WORKER_PROCESSES"
  worker_processes: auto
  # enable cpu affinity, this is just work well only on physical machine
  enable_cpu_affinity: true
  # the number of files a worker process can open, should be larger than worker_connections
  worker_rlimit_nofile: 20480
  # timeout for a graceful shutdown of worker processes
  worker_shutdown_timeout: 240s
  # increase it if you see "too many pending timers" error
  max_pending_timers: 16384
  # increase it if you see "lua_max_running_timers are not enough" error
  max_running_timers: 4096

  event:
    worker_connections: 10620

  meta:
    lua_shared_dict:
      prometheus-metrics: 15m

  stream:
    # enable access log or not, default false
    enable_access_log: "false"
    access_log: logs/access_stream.log
    # create your custom log format by visiting http://nginx.org/en/docs/varindex.html
    access_log_format: "$remote_addr [$time_local] $protocol $status $bytes_sent $bytes_received $session_time"
    # allows setting json or default characters escaping in variables
    access_log_format_escape: default       
    lua_shared_dict:
      etcd-cluster-health-check-stream: 10m
      lrucache-lock-stream: 10m
      plugin-limit-conn-stream: 10m

  main_configuration_snippet:
  http_configuration_snippet:
  http_server_configuration_snippet:
  http_server_location_configuration_snippet:
  http_admin_configuration_snippet:
  http_end_configuration_snippet:
  stream_configuration_snippet:

  http:
    # enable access log or not, default true
    enable_access_log: "true"
    access_log: logs/access.log
    access_log_format: "$remote_addr - $remote_user [$time_local] $http_host \"$request\" $status $body_bytes_sent $request_time \"$http_referer\" \"$http_user_agent\" $upstream_addr $upstream_status $upstream_response_time \"$upstream_scheme://$upstream_host$upstream_uri\""
    access_log_format_escape: default       # allows setting json or default characters escaping in variables
    keepalive_timeout: 60s          # timeout during which a keep-alive client connection will stay open on the server side.
    client_header_timeout: 60s      # timeout for reading client request header, then 408 (Request Time-out) error is returned to the client
    client_body_timeout: 60s        # timeout for reading client request body, then 408 (Request Time-out) error is returned to the client
    # The maximum allowed size of the client request body.
    # If exceeded, the 413 (Request Entity Too Large) error is returned to the client.
    # Note that unlike Nginx, we don't limit the body size by default.
    client_max_body_size: 0         
    send_timeout: 10s              # timeout for transmitting a response to the client.then the connection is closed
    underscores_in_headers: "on"   # default enables the use of underscores in client request header fields
    real_ip_header: X-Real-IP      # http://nginx.org/en/docs/http/ngx_http_realip_module.html#real_ip_header
    real_ip_recursive: "off"       # http://nginx.org/en/docs/http/ngx_http_realip_module.html#real_ip_recursive
    real_ip_from:                  # http://nginx.org/en/docs/http/ngx_http_realip_module.html#set_real_ip_from
      - 127.0.0.1
      - "unix:"

    # Enables or disables passing of the server name through TLS Server Name Indication extension (SNI, RFC 6066)
    # when establishing a connection with the proxied HTTPS server.
    proxy_ssl_server_name: true
    upstream:
      keepalive: 320                # Sets the maximum number of idle keepalive connections to upstream servers that are preserved in the cache of each worker process.
                                    # When this number is exceeded, the least recently used connections are closed.
      keepalive_requests: 1000      # Sets the maximum number of requests that can be served through one keepalive connection.
                                    # After the maximum number of requests is made, the connection is closed.
      keepalive_timeout: 60s        # Sets a timeout during which an idle keepalive connection to an upstream server will stay open.
    charset: utf-8                  # Adds the specified charset to the "Content-Type" response header field, see
                                    # http://nginx.org/en/docs/http/ngx_http_charset_module.html#charset
    variables_hash_max_size: 2048   # Sets the maximum size of the variables hash table.

    lua_shared_dict:
      internal-status: 10m
      plugin-limit-req: 10m
      plugin-limit-count: 10m
      prometheus-metrics: 10m
      plugin-limit-conn: 10m
      upstream-healthcheck: 10m
      worker-events: 10m
      lrucache-lock: 10m
      balancer-ewma: 10m
      balancer-ewma-locks: 10m
      balancer-ewma-last-touched-at: 10m
      plugin-limit-count-redis-cluster-slot-lock: 1m
      tracing_buffer: 10m
      plugin-api-breaker: 10m
      etcd-cluster-health-check: 10m
      discovery: 1m
      jwks: 1m
      introspection: 10m
      access-tokens: 1m
      ext-plugin: 1m
      kubernetes: 1m
      tars: 1m

etcd:
  host:                           # it's possible to define multiple etcd hosts addresses of the same etcd cluster.
    - "http://127.0.0.1:2379"     # multiple etcd address, if your etcd cluster enables TLS, please use https scheme,
                                  # e.g. https://127.0.0.1:2379.
  prefix: /apisix                 # apisix configurations prefix
  timeout: 30                     # 30 seconds
  startup_retry: 2                # the number of retry to etcd during the startup, default to 2
  tls:
    # To enable etcd client certificate you need to build APISIX-Base, see
    # https://apisix.apache.org/docs/apisix/FAQ#how-do-i-build-the-apisix-base-environment?
    #cert: /path/to/cert          # path of certificate used by the etcd client
    #key: /path/to/key            # path of key used by the etcd client
    verify: true                  # whether to verify the etcd endpoint certificate when setup a TLS connection to etcd,
                                  # the default value is true, e.g. the certificate will be verified strictly.
    #sni:                         # the SNI for etcd TLS requests. If missed, the host part of the URL will be used.

graphql:
  max_size: 1048576               # the maximum size limitation of graphql in bytes, default 1MiB

plugins:                          # plugin list (sorted by priority)
  - real-ip                        # priority: 23000
  - client-control                 # priority: 22000
  - proxy-control                  # priority: 21990
  - request-id                     # priority: 12015
  - zipkin                         # priority: 12011
  - ext-plugin-pre-req             # priority: 12000
  - fault-injection                # priority: 11000
  - mocking                        # priority: 10900
  - serverless-pre-function        # priority: 10000
  - cors                           # priority: 4000
  - ip-restriction                 # priority: 3000
  - ua-restriction                 # priority: 2999
  - referer-restriction            # priority: 2990
  - csrf                           # priority: 2980
  - uri-blocker                    # priority: 2900
  - request-validation             # priority: 2800
  - openid-connect                 # priority: 2599
  - authz-casbin                   # priority: 2560
  - authz-casdoor                  # priority: 2559
  - wolf-rbac                      # priority: 2555
  - ldap-auth                      # priority: 2540
  - hmac-auth                      # priority: 2530
  - basic-auth                     # priority: 2520
  - jwt-auth                       # priority: 2510
  - key-auth                       # priority: 2500
  - consumer-restriction           # priority: 2400
  - forward-auth                   # priority: 2002
  - opa                            # priority: 2001
  - authz-keycloak                 # priority: 2000
  - proxy-mirror                   # priority: 1010
  - proxy-cache                    # priority: 1009
  - proxy-rewrite                  # priority: 1008
  - api-breaker                    # priority: 1005
  - limit-conn                     # priority: 1003
  - limit-count                    # priority: 1002
  - limit-req                      # priority: 1001
  - gzip                           # priority: 995
  - server-info                    # priority: 990
  - traffic-split                  # priority: 966
  - redirect                       # priority: 900
  - response-rewrite               # priority: 899
  - kafka-proxy                    # priority: 508
  - grpc-transcode                 # priority: 506
  - grpc-web                       # priority: 505
  - public-api                     # priority: 501
  - prometheus                     # priority: 500
  - datadog                        # priority: 495
  - echo                           # priority: 412
  - loggly                         # priority: 411
  - http-logger                    # priority: 410
  - splunk-hec-logging             # priority: 409
  - skywalking-logger              # priority: 408
  - google-cloud-logging           # priority: 407
  - sls-logger                     # priority: 406
  - tcp-logger                     # priority: 405
  - kafka-logger                   # priority: 403
  - rocketmq-logger                # priority: 402
  - syslog                         # priority: 401
  - udp-logger                     # priority: 400
  - file-logger                    # priority: 399
  - clickhouse-logger              # priority: 398
  - example-plugin                 # priority: 0
  - aws-lambda                     # priority: -1899
  - azure-functions                # priority: -1900
  - openwhisk                      # priority: -1901
  - serverless-post-function       # priority: -2000
  - ext-plugin-post-req            # priority: -3000
  - ext-plugin-post-resp           # priority: -4000

stream_plugins: # sorted by priority
  - ip-restriction                 # priority: 3000
  - limit-conn                     # priority: 1003
  - mqtt-proxy                     # priority: 1000
  - syslog                         # priority: 401

#wasm:
  #plugins:
    #- name: wasm_log
      #priority: 7999
      #file: t/wasm/log/main.go.wasm

#xrpc:
  #protocols:
    #- name: pingpong

plugin_attr: |
    log-rotate:
        interval: 3600
        max_kept: 168
        enable_compression: false
      skywalking:
        service_name: APISIX
        service_instance_name: APISIX Instance Name
        endpoint_addr: http://127.0.0.1:12800
      opentelemetry:
        trace_id_source: x-request-id
        resource:
          service.name: APISIX
        collector:
          address: 127.0.0.1:4318
          request_timeout: 3
          request_headers:
            Authorization: token
        batch_span_processor:
          drop_on_queue_full: false
          max_queue_size: 1024
          batch_timeout: 2
          inactive_timeout: 1
          max_export_batch_size: 16
      prometheus:
        export_uri: /apisix/prometheus/metrics
        metric_prefix: apisix_
        enable_export_server: true
        export_addr:
          ip: 127.0.0.1
          port: 9091
        server-info:
          report_ttl: 60
        dubbo-proxy:
          upstream_multiplex_count: 32
      request-id:
        snowflake:
          enable: false
          snowflake_epoc: 1609459200000
          data_machine_bits: 12
          sequence_bits: 10
          data_machine_ttl: 30
          data_machine_interval: 10
      proxy-mirror:
        timeout:
          connect: 60s
          read: 60s
          send: 60s
  